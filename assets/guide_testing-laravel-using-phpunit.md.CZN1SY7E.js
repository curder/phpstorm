import{_ as t,c as e,o,a2 as s}from"./chunks/framework.T1JhP7-b.js";const l="/phpstorm/assets/select-php-cli-interpreter.BqricXjX.png",p="/phpstorm/assets/new-phpunit-local-dialog.DGMBsF_N.png",i="/phpstorm/assets/config-phpunit-local-setting.DkNNLH1M.png",a="/phpstorm/assets/run-phpunit-using-iterm2-terminal.oWgrZRTp.png",r="/phpstorm/assets/run-phpunit-using-phpstorm-terminal.CVGAArle.png",c="/phpstorm/assets/run-phpunit-filter-classname-and-method-using-iterm2-terminal.Bj-Gktpn.png",n="/phpstorm/assets/run-phpunit-filter-classname-and-method-using-phpstorm-terminal.BkeZjEZJ.png",d="/phpstorm/assets/monitor-test-results.Czkpni-P.png",m="/phpstorm/assets/rerun-failed-tests.D4kIblOB.png",u="/phpstorm/assets/ps_phpunit_enable-auto-test.4i3op9G_.png",h="/phpstorm/assets/ps_phpunit_set-auto-test-delay.DN6jcu4b.png",C=JSON.parse('{"title":"PHPUnit 单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"guide/testing-laravel-using-phpunit.md","filePath":"guide/testing-laravel-using-phpunit.md","lastUpdated":1662396707000}'),P={name:"guide/testing-laravel-using-phpunit.md"},g=s('<h1 id="phpunit-单元测试" tabindex="-1">PHPUnit 单元测试 <a class="header-anchor" href="#phpunit-单元测试" aria-label="Permalink to &quot;PHPUnit 单元测试&quot;">​</a></h1><p>PhpStorm 通过与 <a href="https://phpunit.de/" target="_blank" rel="noreferrer">PHPUnit</a> 测试框架的集成支持 PHP 应用程序的单元测试。</p><p>使用 PHPUnit 之前需要安装到本地。安装 PHPUnit 有两种方式，一种是 PHP 档案包，另一种是通过 Composer脚本。关于 PHPUnit 的安装<a href="https://phpunit.de/getting-started/phpunit-9.html" target="_blank" rel="noreferrer">参考 PHPUnit 官网</a></p><h2 id="将-phpunit-与-phpstorm-项目集成" tabindex="-1">将 PHPUnit 与 PhpStorm 项目集成 <a class="header-anchor" href="#将-phpunit-与-phpstorm-项目集成" aria-label="Permalink to &quot;将 PHPUnit 与 PhpStorm 项目集成&quot;">​</a></h2><p>这里依然以一个 Laravel 项目为例，将 PHPUnit 与 PhpStorm 编辑的 Laravel 项目集成。</p><ol><li><p>使用快捷键 <code>⌘ + ,</code>，打开 IDE 设置并选择 <strong>PHP</strong></p></li><li><p>检查当前所选 PHP 解释器 <img src="'+l+'" alt=""></p><p>在 PHP 页面上，从 CLI Interpreter 列表中选择相关的 PHP 版本，如果没有请添加。</p></li><li><p>点开 PHP 解释器，选择 <code>Test Frameworks</code></p><ol><li><p>点击 New（或者使用快捷键 <code>Control（或 Ctrl）⌃ + N</code>） 新建一个 <code>PHPUnit Local</code>。</p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+p+'" alt=""></p></details></li><li><p>输入如下内容：</p><ol><li><p>在 <strong>PHPUnit library</strong> 分组中选择 <code>Use Composer autoloader</code></p></li><li><p>并在 <code>Path to script:</code> 输入当前项目的 <code>autoload.php</code> 文件路径，一般为当前项目绝对路径 + <code>/vendor/autoload.php</code></p></li><li><p>在 <strong>Test Runner</strong> 分组勾选上 <code>Default configuration file:</code> 后添加 <code>phpunit.xml</code> 或者 <code>phpunit.xml.dist</code> 文件路径，一般为当前项目绝对路径 + <code>phpunit.xml</code> 或 项目绝对路径 + <code>phpunit.xml.dist</code></p></li></ol><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+i+'" alt=""></p></details></li></ol></li></ol><p>至此，已将 PHPUnit 集成到了 PHPStorm 中。</p><h2 id="执行全部单元测试" tabindex="-1">执行全部单元测试 <a class="header-anchor" href="#执行全部单元测试" aria-label="Permalink to &quot;执行全部单元测试&quot;">​</a></h2><p>通常在代码交付到测试或线上环境部署时，会对全部单元测试用例的执行测试。</p><ul><li><p>使用系统终端执行测试</p><p>如果使用了 iTerm2 等命令终端，可以打开终端并来到项目目录下，执行 <code>./vendor/bin/phpunit</code></p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+a+'" alt=""></p></details></li><li><p>使用 PHPStorm 终端执行测试</p><p>同时也可以使用 PHPStorm 终端，使用键盘快捷键 <code>Option（或 Alt）⌥ + F12</code> 打开终端，执行 <code>./vendor/bin/phpunit</code></p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+r+'" alt=""></p></details></li><li><p>使用 PHPStorm 快捷键执行测试 在 PHPStorm 任意文件位置使用快捷键 <code>Control（或 Ctrl）⌃ + R</code> 即可完成所有单元测试的执行。</p><blockquote><p><strong>注意：</strong> 这个快捷键会记录上一次执行的单元测试，再次使用快捷键时会执行上次单元测试的用例。随着单元测试用例越写越多，这对需要对单个文件或者方法的测试非常友好。</p></blockquote></li></ul><h2 id="执行部分单元测试" tabindex="-1">执行部分单元测试 <a class="header-anchor" href="#执行部分单元测试" aria-label="Permalink to &quot;执行部分单元测试&quot;">​</a></h2><p>通常在完成某个功能或者关联功能时需要对单个文件的所有单元测试用例执行测试。</p><ul><li><p>使用系统终端执行测试</p><p>如果使用了 iTerm2 等命令终端，可以打开终端并来到项目目录下，执行 <code>./vendor/bin/phpunit --filter + 文件名/测试方法名</code></p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+c+'" alt=""></p><blockquote><p><strong>说明：</strong></p><ol><li>由于 <code>Laravel</code> 默认的 <code>Unit</code> 和 <code>Feature</code> 目录下的两个类名称均为 <code>ExampleTest</code> 所以执行命令 1 时运行了 2 个单元测试</li><li>命令 2 的<code>--filter</code> 后面的参数为测试用例的方法名</li></ol></blockquote><blockquote><p>总结：通过 <code>--filter</code> 参数后面可以指定测试的类名称或方法名称，当类名称或方法名相同时均会执行</p></blockquote></details></li><li><p>使用 PHPStorm 终端执行测试</p><p>同时也可以使用 PHPStorm 终端，使用键盘快捷键 <code>Option（或 Alt）⌥ + F12</code> 打开终端，执行 <code>./vendor/bin/phpunit</code></p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+n+'" alt=""></p><blockquote><p><strong>说明：</strong></p><ol><li>由于 <code>Laravel</code> 默认的 <code>Unit</code> 和 <code>Feature</code> 目录下的两个类名称均为 <code>ExampleTest</code> 所以执行命令 1 时运行了 2 个单元测试</li><li>命令 2 的<code>--filter</code> 后面的参数为测试用例的方法名</li></ol></blockquote><blockquote><p>总结：通过 <code>--filter</code> 参数后面可以指定测试的类名称或方法名称，当类名称或方法名相同时均会执行</p></blockquote></details></li><li><p>使用 PHPStorm 快捷键执行测试</p><ul><li>如果要执行某个类下的所有单元测试用例，可以将光标停留在该用例类代码内部（非方法内部），输入快捷键 <code>Control（或 Ctrl）⌃ + Shift + R</code> 即可。</li></ul><blockquote><p><strong>温馨提示：</strong> 也可以将光标停留在文件夹或者类名上执行快捷键 <code>Control（或 Ctrl）⌃ + Shift + R</code> 来快速执行 N+1个文件的单元测试</p></blockquote><ul><li>如果要执行某个类的方法的单元测试用例，可以将光标停留在该测试用例内部，同样输入快捷键 <code>Control（或 Ctrl）⌃ + Shift + R</code> 即可。</li></ul></li></ul><h2 id="监控测试结果" tabindex="-1">监控测试结果 <a class="header-anchor" href="#监控测试结果" aria-label="Permalink to &quot;监控测试结果&quot;">​</a></h2><p>PhpStorm 在 Run 工具窗口的 Test Runner 选项卡中显示测试执行结果。</p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+d+'" alt=""></p></details><p>该选项卡分为 2 个主要区域：</p><ul><li><p>左侧区域可深入了解所有单元测试以查看成功和失败的测试。 可以过滤测试、导出结果并使用上下文菜单命令运行特定测试或导航到源代码。</p></li><li><p>右侧区域显示原始 PHPUnit 输出。</p></li></ul><h2 id="重新执行错误的测试" tabindex="-1">重新执行错误的测试 <a class="header-anchor" href="#重新执行错误的测试" aria-label="Permalink to &quot;重新执行错误的测试&quot;">​</a></h2><p>如果我们一次跑了很多测试用例，有一部分成功和一部分失败，当再次跑测试时，仅仅需要跑之前失败的测试用例，可以使用下面的方法完美解决这个问题。</p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+m+'" alt=""></p></details><h2 id="切换自动测试" tabindex="-1">切换自动测试 <a class="header-anchor" href="#切换自动测试" aria-label="Permalink to &quot;切换自动测试&quot;">​</a></h2><p>当受影响的代码更改时，可以让 PhpStorm 自动重新运行测试。</p><p>此选项根据运行/调试配置进行配置，并可应用于测试、测试文件、文件夹或测试的组合选择，具体取决于此运行/调试配置中指定的测试范围。</p><ol><li><p>运行测试</p></li><li><p>在 <code>Test Runner</code> 选项卡上，按工具栏上的 <code>Toggle Auto-Test</code> 按钮</p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+u+'" alt=""></p></details></li><li><p>单击设置按钮，设置代码更改时启动测试的时间延迟（可选）</p><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><p><img src="'+h+'" alt=""></p></details></li></ol>',25),_=[g];function b(k,f,H,q,y,S){return o(),e("div",null,_)}const T=t(P,[["render",b]]);export{C as __pageData,T as default};
