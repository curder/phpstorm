import{_ as e,c as t,o as a,a2 as o}from"./chunks/framework.T1JhP7-b.js";const s="/phpstorm/assets/search-live-templates.Bxpd1AnA.png",l="/phpstorm/assets/live-templates.DNcikjtI.png",c="/phpstorm/assets/create-new-function-use-pubf-live-template.BzVSVuJ7.gif",i="/phpstorm/assets/create-template-group.mrWDZyMR.png",p="/phpstorm/assets/custom-template-group-name.qGPfXhWP.png",d="/phpstorm/assets/edit-template-variables.CXRXgHpg.png",r="/phpstorm/assets/create-new-live-template.CVAH0hdX.png",m="/phpstorm/assets/apply-custom-live-template.BorY-ILM.gif",y=JSON.parse('{"title":"代码片段","description":"","frontmatter":{},"headers":[],"relativePath":"guide/live-templates.md","filePath":"guide/live-templates.md","lastUpdated":1662462726000}'),n={name:"guide/live-templates.md"},u=o('<h1 id="代码片段" tabindex="-1">代码片段 <a class="header-anchor" href="#代码片段" aria-label="Permalink to &quot;代码片段&quot;">​</a></h1><p>PhpStorm 支持通过 <code>Live Templates</code> 功能在编写具体业务代码时快速生成模板代码，比如控制结构、异常捕获、外部静态资源的引用、Vue 组件模块等。</p><p>下面以系统默认的 <code>pubf</code> 代码片段为例：</p><ul><li><p>在 PhpStorm 的 <code>Preferences</code> 偏好设置中选择 <code>Editor</code> -&gt; <code>Live Templates</code></p></li><li><p>或者通过快捷键 <code>Command + Shift + A</code> 呼出 <code>Action</code> 导航界面，在输入框输入 <code>live templates</code>，在下拉列表中选中 <code>Live Templates</code>：</p><details class="details custom-block"><summary>点击切换展示与隐藏</summary><p><img src="'+s+'" alt=""></p></details></li></ul><p>进入文件代码片段界面，在这里可以看到 PhpStorm 内置支持的所有语言的代码片段：</p><details class="details custom-block"><summary>点击切换展示与隐藏</summary><p><img src="'+l+'" alt=""></p></details><p>可以在 PHP 类或 Trait 文件中通过 <code>pubf</code> 然后输入 <code>Tab</code> 键（或者在键入的地方选择下拉框中第一个列出的代码提示按回车确认）并使用 <code>Tab</code> 按键将光标移动到下一个位置，来快速生成 <code>public function</code> 函数模板代码。</p><details class="details custom-block"><summary>点击切换展示与隐藏</summary><p><img src="'+c+'" alt=""></p></details><h2 id="自定义代码片段" tabindex="-1">自定义代码片段 <a class="header-anchor" href="#自定义代码片段" aria-label="Permalink to &quot;自定义代码片段&quot;">​</a></h2><h3 id="新建-template-group" tabindex="-1">新建 <code>Template Group</code> <a class="header-anchor" href="#新建-template-group" aria-label="Permalink to &quot;新建 `Template Group`&quot;">​</a></h3><blockquote><p><strong>注意：</strong> 这一步不是必须的，为了后期方便管理，将所有自定义的代码片段都放在这个新建的分组下。</p></blockquote><p>点击右侧的 <code>+</code> 或者使用快捷键 <code>Command + N</code>，在弹出的下拉选项中选择 <code>2. Template Group...</code></p><details class="details custom-block"><summary>点击切换展示与隐藏</summary><p><img src="'+i+'" alt=""></p></details><p>在接下来的弹出层中输入自定义的代码片段分组名称 <code>Custom</code>。</p><details class="details custom-block"><summary>点击切换展示与隐藏</summary><p><img src="'+p+'" alt=""></p></details><p>如果后续需要添加的自定义代码片段放在自定义的代码片段分组 Custom 中。</p><h3 id="新建代码片段" tabindex="-1">新建代码片段 <a class="header-anchor" href="#新建代码片段" aria-label="Permalink to &quot;新建代码片段&quot;">​</a></h3><p>使用快捷键 <code>Command + N</code> 在自定义分组新建代码片段，在输入表单中提供如下值：</p><ul><li><ol><li>Abbreviation: 代码片段缩写，通过这个缩写可以呼出定义的代码片段内容</li></ol></li><li><ol start="2"><li>Description: 代码片段描述</li></ol></li><li><ol start="3"><li>Template Text: 代码片段具体内容</li></ol><p>模板代码中定义了一些变量（通过 <code>$变量名$</code> 定义），以便为不同的文本输入框定义对应的属性和文本。</p></li><li><ol start="4"><li>Change 选项: 选择代码片段的应用上下文环境，比如有的代码片段是在 HTML 中使用，有的代码片段仅在 PHP 文件中使用，默认不选择上下文的代码片段不会生效</li></ol></li><li><ol start="5"><li>编辑变量</li></ol><p>可以点击这个按钮对定义的变量进行一些配置，比如对 <code>$LABEL$</code> 变量使用表达式 <code>capitalize</code>处理 <code>$NAME$</code> 变量，表示将 <code>NAME</code> 变量值首字母大写为 <code>LABEL</code> 变量赋值</p><details class="details custom-block"><summary>点击切换展示与隐藏</summary><p><img src="'+d+'" alt=""></p></details></li><li><ol start="6"><li>确认保存</li></ol></li></ul><details class="details custom-block"><summary>点击切换展示与隐藏</summary><p><img src="'+r+'" alt=""></p></details><h3 id="使用自定以代码片段" tabindex="-1">使用自定以代码片段 <a class="header-anchor" href="#使用自定以代码片段" aria-label="Permalink to &quot;使用自定以代码片段&quot;">​</a></h3><p>在代码编辑器中选取一个表单片段，尝试输入 <code>tfield</code>，然后点击 <code>Tab</code> 键自动生成对应模板代码，在红色光标处输入 <code>name</code> ，可以看到其它变量位置都会自动填充对应的字符串。如下：</p><p><img src="'+m+'" alt=""></p><p>在日常使用 PhpStorm 进行编码的过程中，灵活创建和定义代码模板可以极大提高编码效率。</p>',24),h=[u];function _(g,b,f,P,T,k){return a(),t("div",null,h)}const q=e(n,[["render",_]]);export{y as __pageData,q as default};
