import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.zuJLNJjo.js";const n="/phpstorm/assets/cli-general-info.B9HIJwuV.png",t="/phpstorm/assets/start-debugging-php-script.BMVUGqrS.png",p="/phpstorm/assets/click-to-set-endpoint.CEA0XQ02.png",l="/phpstorm/assets/add-separate-watches-panel.Cn87z_vv.png",h="/phpstorm/assets/default-separate-watches-panel.C9e-GoRD.png",r="/phpstorm/assets/add-variable-to-watches.DRi261Gt.gif",d="/phpstorm/assets/show-variables-on-watches.DVOBa72K.png",_=JSON.parse('{"title":"PHP 文件使用 Xdebug","description":"","frontmatter":{},"headers":[],"relativePath":"guide/xdebug-for-signal-php-file.md","filePath":"guide/xdebug-for-signal-php-file.md","lastUpdated":1664885721000}'),o={name:"guide/xdebug-for-signal-php-file.md"},k=e(`<h1 id="php-文件使用-xdebug" tabindex="-1">PHP 文件使用 Xdebug <a class="header-anchor" href="#php-文件使用-xdebug" aria-label="Permalink to &quot;PHP 文件使用 Xdebug&quot;">​</a></h1><h2 id="xdebug-调试单文件" tabindex="-1">xdebug 调试单文件 <a class="header-anchor" href="#xdebug-调试单文件" aria-label="Permalink to &quot;xdebug 调试单文件&quot;">​</a></h2><p>假如有如下 PHP 文件：</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $step)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($step </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;At step1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($step </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;At step2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;woo, unknown current step&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Curder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>如何追踪 PHP 在运行过程中变量的赋值情况，一种情况可以通过打印 <code>$result</code> 变量的结果，比如使用 <code>var_dump($result);</code> 如果使用的是 Laravel 项目也可以使用 <code>dd($result);</code>，然后在浏览器中查看结果。</p><p>然而上面的情况我们可以很方便的在 xdebug 中追踪逻辑在运行过程中变量的赋值情况。</p><p>PhpStorm 支持直接使用 Xdebug 调试 PHP 文件，但是需要有如下前置需求：</p><p>下载与 PHP 版本兼容的 <a href="https://www.xdebug.org/" target="_blank" rel="noreferrer">Xdebug 扩展</a>，并按照<a href="https://xdebug.org/docs/install" target="_blank" rel="noreferrer">安装指南</a>中的说明进行安装，<a href="https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html#updatingPhpIni" target="_blank" rel="noreferrer">可以参考这里给 PHP 安装好 Xdebug 扩展</a></p><h2 id="在-phpstorm-中配置-xdebug" tabindex="-1">在 PhpStorm 中配置 Xdebug <a class="header-anchor" href="#在-phpstorm-中配置-xdebug" aria-label="Permalink to &quot;在 PhpStorm 中配置 Xdebug&quot;">​</a></h2><p>以下配置的流程来自 <a href="https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html#integrationWithProduct" target="_blank" rel="noreferrer">PhpStorm 官方帮助文档</a>，可以在官方文档查看更多详情。</p><ol><li>使用快捷键 <code>⌘ + ,</code>，打开 <code>IDE</code> 设置并选择 <strong>PHP</strong>。</li><li>检查与所选 PHP 解释器关联的 Xdebug 安装： <ol><li>在 PHP 页面上，从 <code>CLI Interpreter</code> 列表中选择相关的 PHP 安装，然后单击 <code>...</code>。该列表显示了 PhpStorm 中可用的所有 PHP 安装。</li><li>打开的 CLI 解释器对话框显示以下内容： <ol><li>所选 PHP 安装的版本。</li><li>与所选 PHP 安装（Xdebug 或 Zend Debugger）关联的调试引擎的名称和版本。如果没有配置调试器，PhpStorm 会显示相应的消息： <img src="`+n+'" alt=""></li></ol></li></ol></li></ol><h2 id="开始调试-php-文件" tabindex="-1">开始调试 PHP 文件 <a class="header-anchor" href="#开始调试-php-文件" aria-label="Permalink to &quot;开始调试 PHP 文件&quot;">​</a></h2><p>当 PHP 配置好 Xdebug，并且在 PhpStorm 中正确设置后就可以对 <code>.php</code> 文件进行调试。</p><p>来到主菜单栏 <code>Run</code> -&gt; <code>Debug &#39;index.php&#39;</code>（或者直接使用快捷键 <code>Control（或 Ctrl）⌃ + D</code>）就可以对当前文件进行调试，但是执行完之后发现代码并没有按预期，脚本执行完直接退出了。 <img src="'+t+'" alt=""></p><p>出现这个问题的原因是并<strong>未设置断点</strong>，xdebug并不知道从哪儿截断程序的执行，自然就一直执行到脚本执行完毕才退出。</p><p><img src="'+p+'" alt=""></p><p>设置完断点后再执行快捷键 <code>Control（或者 Ctrl）⌃ + D</code> 就可以看到如下调试界面： 1. <code>Show Execution Point</code> 查看当前断点所在位置 2. <code>Step Over</code> 跳过当前代码行并带您到下一行，即使突出显示的行中有方法调用。方法的实现被跳过，直接进入调用者方法的下一行。 3. <code>Step Into</code> 进入该方法以显示其中发生的事情。当您不确定该方法是否返回正确的结果时，请使用此选项。 4. <code>Force Step Into</code> 方法中的步骤，即使此方法被常规 <code>Step Into</code> 跳过。 5. <code>Step Out</code> 跳出当前方法到调用者方法。 6. <code>Run to Cursor</code> 继续执行，直到到达插入符号的位置。途中的所有断点都将被忽略。</p><blockquote><p>Tips: 在 xdeug 调试过的步骤中，当我们将鼠标光标悬浮在变量名上，可以看到对应变量运行时的值。</p></blockquote><h2 id="添加变量监听" tabindex="-1">添加变量监听 <a class="header-anchor" href="#添加变量监听" aria-label="Permalink to &quot;添加变量监听&quot;">​</a></h2><p>当调试的项目相对复杂时，会需要单独观察一些变量，可以将它们添加到 <code>Watches Lists</code></p><h3 id="开启-separate-watches" tabindex="-1">开启 Separate Watches <a class="header-anchor" href="#开启-separate-watches" aria-label="Permalink to &quot;开启 Separate Watches&quot;">​</a></h3><ol><li>点击右侧的 <code>Layout Settings</code> 布局设置按钮</li><li>点击 <code>Separate Watches</code> 选项，开启 <code>Separate Watches</code><details class="details custom-block"><summary>点击切换截图展示与隐藏</summary><ul><li><p>使用下面的示例流程开启 <code>Separate Watches</code></p><p><img src="'+l+'" alt=""></p></li><li><p>下图为开启 <code>Separate Watches</code> 后的面板</p><p><img src="'+h+'" alt=""></p></li></ul></details></li></ol><h3 id="添加监听的变量" tabindex="-1">添加监听的变量 <a class="header-anchor" href="#添加监听的变量" aria-label="Permalink to &quot;添加监听的变量&quot;">​</a></h3><ul><li>可以通过在输入框添加要监听的变量名，并点击右侧的 <code>+</code> 按钮或使用快捷键<code>Command + Shift + Enter</code>添加。</li><li>也可以点击面板左侧的 <code>+</code> 按钮在随后新增的输入框中输入要监听的变量名并按回车 Enter 确认输入。</li></ul><p><img src="'+r+'" alt=""></p><p>这样方便在众多变量中筛选出关心的变量进行监听查看。</p><p><img src="'+d+'" alt=""></p>',27),c=[k];function g(E,u,b,m,y,P){return i(),a("div",null,c)}const f=s(o,[["render",g]]);export{_ as __pageData,f as default};
