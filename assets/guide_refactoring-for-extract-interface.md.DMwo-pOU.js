import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.zuJLNJjo.js";const e="/phpstorm/assets/refactoring-for-extra-interface-step1.BsP2rqEG.png",p="/phpstorm/assets/refactoring-for-extra-interface-step2.GuwRj9Za.png",l="/phpstorm/assets/show-implement-interface-dialog.DPXGDpSE.png",t="/phpstorm/assets/create-new-php-class-using-interface.CZ7jGfuD.png",y=JSON.parse('{"title":"重构接口","description":"","frontmatter":{},"headers":[],"relativePath":"guide/refactoring-for-extract-interface.md","filePath":"guide/refactoring-for-extract-interface.md","lastUpdated":1663861355000}'),r={name:"guide/refactoring-for-extract-interface.md"},h=n('<h1 id="重构接口" tabindex="-1">重构接口 <a class="header-anchor" href="#重构接口" aria-label="Permalink to &quot;重构接口&quot;">​</a></h1><p>PhpStorm 可以将一组实现类似功能的类方法抽象出来构建一个接口。</p><p>这一节我们一起来通过类方法抽象出一个接口文件，以及通过接口文件创建一个实现它的类。</p><h2 id="提取类方法到接口" tabindex="-1">提取类方法到接口 <a class="header-anchor" href="#提取类方法到接口" aria-label="Permalink to &quot;提取类方法到接口&quot;">​</a></h2><p>想象有一个 <code>MysqlTaskRepository</code> 实现类有 <code>add()</code> 和 <code>completed()</code> 方法，假设在这个基础上将其抽象成接口<code>TaskRepository</code> ，也就是说 <code>add</code>、<code>completed</code> 方法抽象出来构建一个 <code>TaskRepostory</code> 接口。</p><p>要完成这个重构，通过 PhpStorm 进行如下操作：</p><ol><li><p>选中对应的类名 <code>MysqlTaskRepository</code>，在主菜单界面选中 <code>Refactor</code> -&gt; <code>Refactor This...</code> ，或者直接使用快捷键 <code>Control（或 Ctrl）⌃ + T</code>，选择 <code>Extra Interface...</code></p><details class="details custom-block"><summary>点击展示或隐藏截图</summary><p><img src="'+e+'" alt=""></p></details></li><li><p>在从目标类提取接口的弹出层中</p><details class="details custom-block"><summary>点击展示或隐藏截图</summary><ol><li>自定义接口类名</li><li>选择接口包含的抽象方法</li><li>以上信息确认无误后，点击 <code>Refactor</code> 确认操作 <img src="'+p+`" alt=""> :::</li></ol></details></li><li><p>检查接口 <code>TaskRepository</code> 定义，并可以看到原始类 <code>MysqlTaskRepository</code> 自动实现了接口定义的方法</p><ul><li>接口 <code>TaskRepository</code></li></ul><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App\\Repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskRepository</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $name);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> completed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $task);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><code>MysqlTaskRepository</code></li></ul><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App\\Repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MysqlTaskRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskRepository</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> completed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $task)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ol><h2 id="通过接口定义新建类" tabindex="-1">通过接口定义新建类 <a class="header-anchor" href="#通过接口定义新建类" aria-label="Permalink to &quot;通过接口定义新建类&quot;">​</a></h2><ol><li><p>通过鼠标光标悬浮在接口名上，等待一下，在左侧出现的 <code>Show context Actions</code> 选择 <code>Implement interface</code>，或者也可以直接使用快捷键 <code>Alt + 回车</code>：</p><p><img src="`+l+'" alt=""></p></li><li><p>在新建 PHP 类的弹出窗口输入对应类名、检查类命名空间以及文件名和存储路径，如果没有问题，则可以点击 <code>OK</code> 确认通过接口创建类。</p><p><img src="'+t+'" alt=""></p></li></ol>',9),c=[h];function o(k,d,g,m,E,u){return i(),a("div",null,c)}const F=s(r,[["render",o]]);export{y as __pageData,F as default};
